generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== MODÈLES PRINCIPAUX ==========

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  username    String   @unique // Auto-généré, unique, non modifiable
  nickname    String?
  dateOfBirth DateTime
  gender      Gender
  bio         String?  @db.Text
  photoUrl    String?
  preferences Json     @default("{}")

  // Status et validation
  isActive      Boolean  @default(true)
  isVerified    Boolean  @default(false)
  emailVerified Boolean  @default(false)
  lastSeen      DateTime @default(now())
  isOnline      Boolean  @default(false)

  // Crédits et abonnement
  credits      Int       @default(10)
  isPremium    Boolean   @default(false)
  premiumUntil DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Géolocalisation
  latitude     Float?
  longitude    Float?
  city         String?
  country      String?
  searchRadius Int     @default(50)

  // Préférences de matching
  minAgePreference Int @default(18)
  maxAgePreference Int @default(70)

  // Relations existantes
  photos           UserPhoto[]
  sentLikes        Like[]         @relation("SentLikes")
  receivedLikes    Like[]         @relation("ReceivedLikes")
  blockedUsers     Block[]        @relation("BlockingUser")
  blockedByUsers   Block[]        @relation("BlockedUser")
  reports          Report[]       @relation("ReportingUser")
  reportedBy       Report[]       @relation("ReportedUser")
  profileViews     ProfileView[]  @relation("ViewedProfile")
  profileViewedBy  ProfileView[]  @relation("ViewerProfile")
  notifications    Notification[]
  sessions         Session[]

  // Relations pour la messagerie
  conversationsAsUser1  Conversation[]       @relation("ConversationUser1")
  conversationsAsUser2  Conversation[]       @relation("ConversationUser2")
  sentMessages          Message[]            @relation("SentMessages")
  receivedMessages      Message[]            @relation("ReceivedMessages")
  messageReactions      MessageReaction[]

  // Relations pour les amis
  friends                User[]          @relation("UserFriends")
  friendsOf              User[]          @relation("UserFriends")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Relations pour les sessions vidéo
  videoSessionsAsUser1  VideoSession[]       @relation("VideoSessionUser1")
  videoSessionsAsUser2  VideoSession[]       @relation("VideoSessionUser2")
  videoSessionMessages  VideoSessionMessage[]
  videoSessionMetrics   VideoSessionMetric[]

  // Index pour les performances
  @@index([email])
  @@index([username])
  @@index([nickname])
  @@index([latitude, longitude])
  @@index([lastSeen])
  @@index([isActive, isVerified])
  @@index([isOnline])
}

model UserPhoto {
  id         Int      @id @default(autoincrement())
  userId     Int
  url        String
  isProfile  Boolean  @default(false)
  isVerified Boolean  @default(false)
  order      Int      @default(0)
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, order])
  @@index([userId])
}

// ========== MATCHING & INTERACTIONS ==========

model Like {
  id          Int      @id @default(autoincrement())
  fromUserId  Int
  toUserId    Int
  isSuperLike Boolean  @default(false)
  message     String?
  createdAt   DateTime @default(now())

  fromUser User @relation("SentLikes", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedLikes", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

// ========== SYSTÈME D'AMIS ==========

model FriendRequest {
  id          Int                 @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  status      FriendRequestStatus @default(PENDING)
  message     String?
  respondedAt DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId, status])
  @@index([status])
}

// ========== MESSAGERIE COMPLÈTE ==========

model Conversation {
  id             Int       @id @default(autoincrement())
  user1Id        Int
  user2Id        Int
  lastMessage    String?
  lastMessageAt  DateTime?
  unreadCount1   Int       @default(0)
  unreadCount2   Int       @default(0)
  isArchived1    Boolean   @default(false)
  isArchived2    Boolean   @default(false)
  isMuted1       Boolean   @default(false)
  isMuted2       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user1    User      @relation("ConversationUser1", fields: [user1Id], references: [id])
  user2    User      @relation("ConversationUser2", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
  @@index([lastMessageAt])
}

model Message {
  id             Int               @id @default(autoincrement())
  conversationId Int
  senderId       Int
  receiverId     Int
  content        String            @db.Text
  messageType    MessageType       @default(TEXT)
  attachments    Json?
  isRead         Boolean           @default(false)
  readAt         DateTime?
  isEdited       Boolean           @default(false)
  editedAt       DateTime?
  isDeleted      Boolean           @default(false)
  deletedAt      DateTime?
  replyToId      Int?
  metadata       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  conversation Conversation      @relation(fields: [conversationId], references: [id])
  sender       User              @relation("SentMessages", fields: [senderId], references: [id])
  receiver     User              @relation("ReceivedMessages", fields: [receiverId], references: [id])
  replyTo      Message?          @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]         @relation("MessageReplies")
  reactions    MessageReaction[]

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model MessageReaction {
  id         Int      @id @default(autoincrement())
  messageId  Int
  userId     Int
  emoji      String
  createdAt  DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
}

// ========== SESSIONS VIDÉO ==========

model VideoSession {
  id                Int                   @id @default(autoincrement())
  roomId            String                @unique
  user1Id           Int
  user2Id           Int
  sessionType       VideoSessionType      @default(RANDOM)
  startedAt         DateTime              @default(now())
  endedAt           DateTime?
  duration          Int?
  endReason         String?
  friendshipCreated Boolean               @default(false)
  createdAt         DateTime              @default(now())

  user1    User                   @relation("VideoSessionUser1", fields: [user1Id], references: [id])
  user2    User                   @relation("VideoSessionUser2", fields: [user2Id], references: [id])
  messages VideoSessionMessage[]
  metrics  VideoSessionMetric[]

  @@index([user1Id])
  @@index([user2Id])
  @@index([startedAt])
}

model VideoSessionMessage {
  id             Int         @id @default(autoincrement())
  videoSessionId Int
  senderId       Int
  content        String
  messageType    MessageType @default(TEXT)
  createdAt      DateTime    @default(now())

  videoSession VideoSession @relation(fields: [videoSessionId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])

  @@index([videoSessionId])
}

model VideoSessionMetric {
  id             Int          @id @default(autoincrement())
  videoSessionId Int
  userId         Int
  metricType     String
  value          Float
  metadata       Json?
  createdAt      DateTime     @default(now())

  videoSession VideoSession @relation(fields: [videoSessionId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([videoSessionId])
  @@index([userId])
}

// ========== SÉCURITÉ & MODÉRATION ==========

model Block {
  id        Int      @id @default(autoincrement())
  blockerId Int
  blockedId Int
  reason    String?
  createdAt DateTime @default(now())

  blocker User @relation("BlockingUser", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId])
}

model Report {
  id          Int          @id @default(autoincrement())
  reporterId  Int
  reportedId  Int
  reason      String
  details     String?      @db.Text
  context     String?
  metadata    Json?
  status      ReportStatus @default(PENDING)
  reviewedAt  DateTime?
  reviewedBy  Int?
  createdAt   DateTime     @default(now())

  reporter User @relation("ReportingUser", fields: [reporterId], references: [id])
  reported User @relation("ReportedUser", fields: [reportedId], references: [id])

  @@index([status])
  @@index([createdAt])
}

// ========== ANALYTICS & TRACKING ==========

model ProfileView {
  id        Int      @id @default(autoincrement())
  viewerId  Int
  profileId Int
  viewedAt  DateTime @default(now())

  viewer  User @relation("ViewerProfile", fields: [viewerId], references: [id], onDelete: Cascade)
  profile User @relation("ViewedProfile", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, viewedAt])
  @@index([viewerId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

// ========== SESSIONS & AUTH ==========

model Session {
  id           String   @id @default(uuid())
  userId       Int
  token        String   @unique
  userAgent    String?
  ipAddress    String?
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// ========== ENUMS ==========

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum NotificationType {
  MESSAGE
  FRIEND_REQUEST
  MATCH
  LIKE
  SUPER_LIKE
  PROFILE_VIEW
  SYSTEM
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  LOCATION
  SYSTEM
}

enum VideoSessionType {
  RANDOM
  FRIEND
  SCHEDULED
}